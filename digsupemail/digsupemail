#!/usr/bin/env node

const chalk = require("chalk");
const args = process.argv;
const { Transform } = require("stream");
const connect = require("@databases/pg");
const { sql } = require("@databases/pg");
const nodeMailer = require("nodemailer");
const config = require('./config.json')

let db;

let transporter = nodeMailer.createTransport({
  host: "127.0.0.1",
  port: 1025
});

const commands = ["start", "help"];

const usageText = `
  digsupemail helps you send emails.

  usage:
    digsupemail <command>

    commands can be:

    start:      used to start reading from DB and send emails
    help:     used to print the usage guide
  `;




// used to log errors to the console in red color
function errorLog(error) {
  const eLog = chalk.red(error);
  console.log(eLog);
}

// we make sure the length of the arguments is exactly three
if (args.length > 3) {
  errorLog(`only one argument can be accepted`);
  console.log(usageText);
}

if (commands.indexOf(args[2]) == -1) {
  errorLog("invalid command passed");
  console.log(usageText);

}

switch (args[2]) {
  case "help":
    console.log(usageText);

    break;
  case "start":
    // may be we can await below statement
    startProcessing();
    break;

  default:
    errorLog("invalid command passed");
    console.log(usageText);

}

async function startProcessing() {
  try {
    db = connect(config.dbConfig);

    let result = await db.queryNodeStream(
      sql`SELECT * FROM "Users" WHERE flag = 'unsent';`
    );
    result.pipe(getTransformStream()).pipe(process.stdout)
  } catch (error) {
    console.log(error);
  }
}

function getTransformStream() {
  const jsonToDb = new Transform({
    writableObjectMode: true,
    transform(chunk, encoding, callback) {
      this.records.push(chunk);
      // batch processing of records
      if (this.records.length == 2) {
        sendEmailAndUpdateInDb(this.records)
        .then(data => {
          this.records.forEach(record => {
            this.push(`processing done: ${record.email}\n`);
          });
          // reset records for batch processing
          this.records = [];
          callback();
        });
      } else {
        callback();
      }
    },
    flush(done) {
      // flush we repeat steps for last records,
      // eg if we are processing in batch of 2,total records are 5, last 1 record is left to process
      if (this.records.length > 0) {
        sendEmailAndUpdateInDb(this.records).then(data => {
          this.records.forEach(record => {
            this.push(record.email);
          });
          done();
        });
      } else {
        done();
      }
    }
  });
  jsonToDb.records = [];
  return jsonToDb;
}

// async function to process data
async function sendEmailAndUpdateInDb(array) {
  try {

    let results = await Promise.all(
      array.map(record => {
        return transporter.sendMail({
          from: `info@digsup.com`,
          to: record.email,
          subject: `test subject`,
          text: `sample text`
        });
      })
    );

    
    await Promise.all(
      array.map(record => {
        return db.query(
          sql`UPDATE "Users" SET flag = 'sent' WHERE email = ${record.email}`
        );
      }))



    return results;
  } catch (error) {
    console.error(error.message);
    throw error

  }
}
